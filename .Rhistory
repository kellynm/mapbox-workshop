install.packages(sp)
install.packages(raster)
install.packages("raster")
install.packages("sp")
install.packages("gstats")
install.packages("gstat")
install.packages("data.frame")
library(Rcpp)
install.packages("Rcpp")
library(Rcpp)
install.packages("Rcpp")
install.packages("data.frame")
library(Rcpp)
install.packages("Rcpp")
library(Rcpp)
install.packages("Rcpp11")
library(Rcpp)
install.packages("Rcpp")
library("sp")
install.packages("sp")
library("sp")
x <- 0:10  # Assigns number 0 through 10 to x
x  # Prints contents of x in console
y <- c(5, 4, 1, 6, 7, 2, 2, 3, 2, 8)  # Assigns values to y
y  # Prints y to console
ls()  # List objects
load("C:/Users/Owner/Desktop/713/meuse_data.Rdata")
summary(meuse@coords)
library(sp)
load("meuse_data.Rdata")
head(meuse)
library(raster)
library(tibble)
library(readr)
library(dplyr)
library(data.table)
us_fires <- fread("C:/Users/Owner/Desktop/wildfire-dash-master/us_fires.csv")
unique(us_fires$source_system)
unique(us_fires$source_system_type)
unique(us_fires$fire_code)
unique(us_fires$start_cause_code)
unique(us_fires$stat_cause_code)
unique(us_fires$stat_cause_descr)
us_fires[,c("fire_year")]
us_fires[,c("fire_year", "stat_cause_code", "stat_cause_descr", "fire_size", "fire_size_class", "latitude", "longitude", "owner_code", "owner_descr", "state", "county", "fips_name", "cause",  "date")]
us_fires_small <- us_fires[,c("fire_year", "stat_cause_code", "stat_cause_descr", "fire_size", "fire_size_class", +
"latitude", "longitude", "owner_code", "owner_descr", "state", "county", "fips_name", +
"cause", "date")]
us_fires_small <- us_fires[,c("fire_year", "stat_cause_code", "stat_cause_descr", "fire_size", "fire_size_class" +
,"latitude", "longitude", "owner_code", "owner_descr", "state", "county", "fips_name", +
"cause", "date")]
us_fires_small <- us_fires[,c("fire_year", "stat_cause_code", "stat_cause_descr", "fire_size", "fire_size_class" +
,"latitude", "longitude", "owner_code", "owner_descr", "state", "county", "fips_name" +
,"cause", "date")]
us_fires_small <- us_fires[,c("fire_year", "stat_cause_code", "stat_cause_descr", "fire_size", "fire_size_class"
,"latitude", "longitude", "owner_code", "owner_descr", "state", "county", "fips_name"
,"cause", "date")]
write_csv(us_fires_small, "us_fires.csv")
pwd()
getwd()
## To install the most recent version of the PoPS Package
## if you don't have devtools package, install it with install.packages("devtools")
## if the pops package needs to install some dependencies, let it install all of them
library(devtools)
install.packages("backports")
devtools::install_github("ncsu-landscape-dynamics/rpops", ref="landscape_pattern")  # If it needs to install any dependencies, just let it do that
## To install the most recent version of the PoPS Package
## if you don't have devtools package, install it with install.packages("devtools")
## if the pops package needs to install some dependencies, let it install all of them
library(devtools)
devtools::install_github("ncsu-landscape-dynamics/rpops", ref="landscape_pattern")  # If it needs to install any dependencies, just let it do that
install_github
devtools::install_github("ncsu-landscape-dynamics/rpops", ref="landscape_pattern")  # If it needs to install any dependencies, just let it do that
devtools::install_github("ncsu-landscape-dynamics/rpops", ref="landscape_pattern")  # If it needs to install any dependencies, just let it do that
devtools::install_github("ncsu-landscape-dynamics/rpops", ref="landscape_pattern")  # If it needs to install any dependencies, just let it do that
## To install the most recent version of the PoPS Package
## if you don't have devtools package, install it with install.packages("devtools")
## if the pops package needs to install some dependencies, let it install all of them
library(devtools)
devtools::install_github("ncsu-landscape-dynamics/rpops", ref="landscape_pattern")  # If it needs to install any dependencies, just let it do that
## load necessary packages
library(PoPS)
library(data.table)
poe <- fread("C:/Users/Owner/Documents/GitHub/cutflower_model/data/POE_geocoded.csv")
origin <- fread("C:/Users/Owner/Documents/GitHub/cutflower_model/data/origin_geocoded.csv")
plot(origin)
spplot(origin)
library(rgdal)
?data
coordinates(poe) <- c("lat", "lon")
View(poe)
coordinates(poe) <- c("latitude_poe", "longitude_poe")
?fread
poe <- poe[!City == "International Falls"]
coordinates(poe) <- c("latitude_poe", "longitude_poe")
plot(poe)
coordinates(poe) <- c("longitude_poe", 'latitude_poe')
poe <- fread("C:/Users/Owner/Documents/GitHub/cutflower_model/data/POE_geocoded.csv")
poe <- poe[!City == "International Falls"]
coordinates(poe) <- c("longitude_poe", 'latitude_poe')
plot(poe)
library(data.table)
library(rgdal)
poe <- fread("C:/Users/Owner/Documents/GitHub/cutflower_model/data/POE_geocoded.csv")
poe <- poe[!City == "International Falls"]
origin <- fread("C:/Users/Owner/Documents/GitHub/cutflower_model/data/origin_geocoded.csv")
coordinates(poe) <- c("longitude_poe", 'latitude_poe')
coordinates(origin)
coordinates(origin) <- c("longitude_origin", 'latitude_origin')
is.na(origin$latitude_origin)
origin[is.na(latitude_origin),]
origin <- na.omit(origin)
coordinates(origin) <- c("longitude_origin", 'latitude_origin')
plot(poe)
plot(origin)
?writeOGR
setwd("C:/Users/Owner/Documents/GitHub/mapbox-workshop")
writeOGR(poe, "poe",
layer="poe", driver="GeoJSON")
writeOGR(origin, "origin",
layer="origin", driver="GeoJSON")
